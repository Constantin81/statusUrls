// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CheckClient is the client API for Check service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CheckClient interface {
	AddUrl(ctx context.Context, in *AddRequestUrl, opts ...grpc.CallOption) (*AddResponseUrl, error)
	GetStatusUrl(ctx context.Context, in *RequestInfoByCheckUrl, opts ...grpc.CallOption) (*ResponseInfoByCheckUrl, error)
	DeleteUrl(ctx context.Context, in *RequestUrlDelete, opts ...grpc.CallOption) (*ResponseUrlDelete, error)
}

type checkClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckClient(cc grpc.ClientConnInterface) CheckClient {
	return &checkClient{cc}
}

func (c *checkClient) AddUrl(ctx context.Context, in *AddRequestUrl, opts ...grpc.CallOption) (*AddResponseUrl, error) {
	out := new(AddResponseUrl)
	err := c.cc.Invoke(ctx, "/api.Check/AddUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) GetStatusUrl(ctx context.Context, in *RequestInfoByCheckUrl, opts ...grpc.CallOption) (*ResponseInfoByCheckUrl, error) {
	out := new(ResponseInfoByCheckUrl)
	err := c.cc.Invoke(ctx, "/api.Check/GetStatusUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkClient) DeleteUrl(ctx context.Context, in *RequestUrlDelete, opts ...grpc.CallOption) (*ResponseUrlDelete, error) {
	out := new(ResponseUrlDelete)
	err := c.cc.Invoke(ctx, "/api.Check/DeleteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckServer is the server API for Check service.
// All implementations must embed UnimplementedCheckServer
// for forward compatibility
type CheckServer interface {
	AddUrl(context.Context, *AddRequestUrl) (*AddResponseUrl, error)
	GetStatusUrl(context.Context, *RequestInfoByCheckUrl) (*ResponseInfoByCheckUrl, error)
	DeleteUrl(context.Context, *RequestUrlDelete) (*ResponseUrlDelete, error)
	mustEmbedUnimplementedCheckServer()
}

// UnimplementedCheckServer must be embedded to have forward compatible implementations.
type UnimplementedCheckServer struct {
}

func (UnimplementedCheckServer) AddUrl(context.Context, *AddRequestUrl) (*AddResponseUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUrl not implemented")
}
func (UnimplementedCheckServer) GetStatusUrl(context.Context, *RequestInfoByCheckUrl) (*ResponseInfoByCheckUrl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusUrl not implemented")
}
func (UnimplementedCheckServer) DeleteUrl(context.Context, *RequestUrlDelete) (*ResponseUrlDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUrl not implemented")
}
func (UnimplementedCheckServer) mustEmbedUnimplementedCheckServer() {}

// UnsafeCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CheckServer will
// result in compilation errors.
type UnsafeCheckServer interface {
	mustEmbedUnimplementedCheckServer()
}

func RegisterCheckServer(s grpc.ServiceRegistrar, srv CheckServer) {
	s.RegisterService(&Check_ServiceDesc, srv)
}

func _Check_AddUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequestUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).AddUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Check/AddUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).AddUrl(ctx, req.(*AddRequestUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_GetStatusUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfoByCheckUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).GetStatusUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Check/GetStatusUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).GetStatusUrl(ctx, req.(*RequestInfoByCheckUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Check_DeleteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUrlDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckServer).DeleteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Check/DeleteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckServer).DeleteUrl(ctx, req.(*RequestUrlDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// Check_ServiceDesc is the grpc.ServiceDesc for Check service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Check_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Check",
	HandlerType: (*CheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUrl",
			Handler:    _Check_AddUrl_Handler,
		},
		{
			MethodName: "GetStatusUrl",
			Handler:    _Check_GetStatusUrl_Handler,
		},
		{
			MethodName: "DeleteUrl",
			Handler:    _Check_DeleteUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/status.proto",
}
